.section--section-gap {
    // the approach to height with 'rosa' is to have it at 66%
    // this would require setting `height: 100%` on all ancestors up to <html>
    // the approach I've used has the advantage of keeping scale with teh width, meaining
    // that you can always be sure that it will work on all screen sizes (background
    // doesn't get shifted off the edge) since the same part of the image will be visible 
    // on all screen sizes at the top of scroll and similarly, at the bottom of scroll
    height: 0;
    padding-top: $parallax-image-container-height-width-ratio * 100%;
    position: relative;
    overflow: hidden;
}

.section--section-gap__img {
    position: absolute;
    background-size: cover;
    background-repeat: no-repeat;
}

.section--section-gap__img--parallax {
    top: 0;
    height: 100%;
    width: 100%;
}

@for $cur-parallax-image-i from 0 through ($number-of-parallax-images - 1) {
    $cur-parallax-layers: nth($parallax-image-layers, $cur-parallax-image-i + 1);
    
    @for $cur-parallax-layer-i from 0 through (length($cur-parallax-layers) - 1) {
        $cur-parallax-layer: nth($cur-parallax-layers, $cur-parallax-layer-i + 1);

        @if (not map-get($cur-parallax-layer, "ignore")) {
            .section--section-gap-#{$cur-parallax-image-i}__img--layer-#{$cur-parallax-layer-i} {
                @if (map-get($cur-parallax-layer, "png")) {
                    background-image: url("../img/section-gap-" + $cur-parallax-image-i + "-layer-" + $cur-parallax-layer-i + ".png");
                } @else {
                    background-image: url("../img/section-gap-" + $cur-parallax-image-i + "-layer-" + $cur-parallax-layer-i + ".jpg");
                }
                
                @if (map-get($cur-parallax-layer, "rotate")) {
                    // transform-origin: map-get($cur-parallax-layer, "rotate-x") map-get($cur-parallax-layer, "rotate-y");
                    width: map-get($cur-parallax-layer, "width");
                    height: map-get($cur-parallax-layer, "height");
                    top: map-get($cur-parallax-layer, "topStart");
                    left: map-get($cur-parallax-layer, "leftStart");
                }
            }
        }
    }
}